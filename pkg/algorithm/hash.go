package algorithm

import (
	"bytes"
	"crypto/sha256"
	"encoding"
	"fmt"
	"log"
	"hash"
)

const (
	exp1 = "this is a example"
	exp2 = "this is another example"
)

func HashFunc() {
	var firstHash hash.Hash
	firstHash = sha256.New()
	firstHash.Write([]byte(exp1))
	marshaler, ok := firstHash.(encoding.BinaryMarshaler)
	if !ok {
	log.Fatal("first Hash is not generated by encoding.BinaryMarshaler")
	}
	data, err := marshaler.MarshalBinary()
	if err != nil{
		log.Fatal("Failure to create first Hash: ",err)
	}
	secondHash := sha256.New()
	unmarshaler,ok := secondHash.(encoding.BinaryUnmarshaler)
	if !ok{
		log.Fatal("second hash is not generated by encoding.BinaryUmarshaler")
	}
	if err := unmarshaler.UnmarshalBinary(data);err!=nil{
		log.Fatal("failure to create hash:",err)
	}
	firstHash.Write([]byte(exp2))
	secondHash.Write([]byte(exp2))
	fmt.Println(firstHash.Sum(nil))
	fmt.Println(secondHash.Sum(nil))
	fmt.Println(bytes.Equal(firstHash.Sum(nil),secondHash.Sum(nil)))

}


